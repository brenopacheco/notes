#+title: RabbitMQ

* What is it

    open source message broker

    - server-client architecture
    - connects via TCP to clients
    - supports many protocols (AMQP, HTTP, STOMP, MQTT)

* How it works

    - spawns a server on a TCP socket
    - clients may be ~consumers~ or ~producers of /messages/

* Glossary

    - Message    :: information sent from /producer/ to /consumer/
    - Broker     :: the RabbitMQ server that forwards messages
    - Protocol   :: the protocol used on top of TCP
    - AMQP       :: Advanced Message Queuing Protocol - the main protocol
    - Consumer   :: app that receives the /messages/
    - Producers  :: app that produces /messages/
    - Connection :: TCP connection between client and RabbitMQ broker.
    - Channel    :: virtual connection sharing a single TCP connection **
    - Exchange   :: a router that routes messages to a designated /queue/
    - Queue      :: a queue of messages
    - Binding    :: a route definition between queue and an exchange

    + why use channels?
      an application needs multiple connections to the broker but having
      multiple TCP connections is resource intensive. so we use 1 connection
      and multiple channels. the channel works as a multiplexer.

    - Nack :: Negative Acknowledgment - tells broker a message was not handled
              Nacked message is sent back to the queue


    - Publisher-confirms :: indicate that messages have been received by RabbitMQ.
    - Delivery-tag       :: uniquely identifies the delivery on a channel

    - Routing-key ::

* Protocols

    RabbitMQ supports multiple protocols and the protocol used between
    a producer and the broker may be different from another producer or
    another consumer. Meaning producer A can talk to the broker in HTTP
    and producer B can talk to the broker in AMQP.

    Protocols supported:
    - AMQP, HTTP, STOMP, MQTT, WebSockets/Web-Stomp, etc...

* Messages

* Queues

* Exchanges

    Exchanges perform routing from published messages to it's designated
    queues. the routing algoritm depend on the ~Exchange type~, which
    defines if a message is sent to one queue, multiple queues, queues
    whose names match a regex, etc..., depending on the exchange type 
    and the bindings defined.

** Exchange types

    - direct  :: (default / amq.direct) - routes to a single queue 
    - fanout  :: (amq.fanout)
    - topic   :: (amq.topic)
    - headers :: (amq.match / amq.headers)

** Exchange Atributes

    - Name        :: exchange name / identification
    - Durability  :: wether it  survive broker restart
    - Auto-delete :: wether it is deleted when last queue is unbound from it
    - Arguments   :: optional, used by plugins and broker-specific features



