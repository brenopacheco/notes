#+title: RabbitMQ

* What is it

    open source message broker

    - server-client architecture
    - connects via TCP to clients
    - supports many protocols (AMQP, HTTP, STOMP, MQTT)

* How it works

    - spawns a server on a TCP socket
    - clients may be ~consumers~ or ~producers of /messages/

* Glossary

    - Message    :: information sent from /producer/ to /consumer/
    - Broker     :: the RabbitMQ server that forwards messages
    - Protocol   :: the protocol used on top of TCP
    - AMQP       :: Advanced Message Queuing Protocol - the main protocol
    - Consumer   :: app that receives the /messages/
    - Producers  :: app that produces /messages/
    - Connection :: TCP connection between client and RabbitMQ broker.
    - Channel    :: virtual connection sharing a single TCP connection **
    - Exchange   :: a router that routes messages to a designated /queue/
    - Queue      :: a queue of messages
    - Binding    :: a route definition between queue and an exchange

    + why use channels?
      an application needs multiple connections to the broker but having
      multiple TCP connections is resource intensive. so we use 1 connection
      and multiple channels. the channel works as a multiplexer.

    - Nack :: Negative Acknowledgment - tells broker a message was not handled
              Nacked message is sent back to the queue


    - Publisher-confirms :: indicate that messages have been received by RabbitMQ.
    - Delivery-tag       :: uniquely identifies the delivery on a channel

    - Routing-key ::

* Protocols

    RabbitMQ supports multiple protocols and the protocol used between
    a producer and the broker may be different from another producer or
    another consumer. Meaning producer A can talk to the broker in HTTP
    and producer B can talk to the broker in AMQP.

    Protocols supported:
    - AMQP, HTTP, STOMP, MQTT, WebSockets/Web-Stomp, etc...

* Messages

* Queues

* Exchanges

    Exchanges perform routing from published messages to it's designated
    queues. the routing algoritm depend on the ~Exchange type~, which
    defines if a message is sent to one queue, multiple queues, queues
    whose names match a regex, etc..., depending on the exchange type 
    and the bindings defined.

** Exchange types

    - direct  :: (default / amq.direct) - routes to a single queue 
    - fanout  :: (amq.fanout)
    - topic   :: (amq.topic)
    - headers :: (amq.match / amq.headers)

** Exchange Atributes

    - Name        :: exchange name / identification
    - Durability  :: wether it  survive broker restart
    - Auto-delete :: wether it is deleted when last queue is unbound from it
    - Arguments   :: optional, used by plugins and broker-specific features

* Best practices

summary:

    - 1 connection for publishing
    - 1 connection for consuming
    - 1 connection per thread
    - no closing/opening conns repeatedly
    - keep queues short
    - limit queue length
    - lazy queues for availability and NO for performance
    - use transient messages
    - use multiple queues and consumers (bc. single thread)
    - disable manual acks/publish confirms (or every X msgs)
    - no multiple nodes for throughput. use 2 for safety
    - enable HiPE
    - disable unused plugins

https://www.youtube.com/watch?v=HzPOQsMWrGQ&list=WL&index=120

1 connection for publishing
1 connection for consuming
1 connection per thread

dont open/close connection repeatedly
    1 TCP package per publish
    ~20 TCP packages to open and publish

short queues are fast
    -> try to consume as soon as it is published
    i.   queue doesn't get written to disk
    ii.  server takes time to load if queue is long
    iii. nodes take time to sync
    iv.  messages get indexed

queues are single threaded
    -> maximum throughput of 15.000 messages/s
    -> may be split into multiple queues (sharding)

consume -> the server pushes messages
get -> client pull messages (much slower)

we can auto-ack every X messages instead of EVERY msg

good to keep number of queues small < 1000

use auto deleted / temporary queues

for a message to survive a server restart:
    durable exchange
    durable queue
    persistent message (delivery_mode=2)

for high throughput use non-durable queues

publish-confirm:
    makes sure consumer receives message
    many clients miss this features
    some clients do not republish if it is not confirmed
    does not need to block 

prefetch:  number of messages sent to client before it needs
           to acknowledge it
           -> unchecked messages remain in RAM of server and client
           -> may cause Out of Ram exception
           -> if client stops for some reason, problems arises

always reject messages that fails
do not set unlimited prefetch values

scalability will require load balancing

filesystems
    XFS is fastest

HiPE : high performance erlang
       compiles rabbitmq
       20-80% better thorughput
       increased boot time


use memory off-heap
do not embbed small messages (<4k) -> worses ram usage
channel max is too big, reduce it
use TCP keepalive instead of AMQP heatbeat (clients do not implement it)
    -> test conn for 2 mins. if no answer, it's dead

